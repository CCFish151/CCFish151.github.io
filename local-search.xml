<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>A Simple Introduction to MySQL</title>
    <link href="/2022/04/27/mysql/MySQL.assets/MySQL/"/>
    <url>/2022/04/27/mysql/MySQL.assets/MySQL/</url>
    
    <content type="html"><![CDATA[<h1 id="STATUS-INCOMPLETE"><a href="#STATUS-INCOMPLETE" class="headerlink" title="STATUS: INCOMPLETE"></a>STATUS: INCOMPLETE</h1><p>最近数据库正好要结课了，我就趁着这个机会，斗胆向大家分享下我的所学所感，希望能有所帮助。</p><blockquote><p>提前声明</p><p>使用教材的为《MySQL实用教材（第4版）》</p><p>在我看来这本书其实还不错，起码作为一本入门的书，还是值得一读的。</p><p>另外，我会用大写字母来队语法进行讲解，用小写字母书写示例内容，还请注意！</p></blockquote><p><em>我会按照顺序队主要内容进行梳理，假如你有需要的话，可以通过右边的目录直接跳转到相应位置。</em></p><p>那么我们下面就开始了！</p><h2 id="数据库原理"><a href="#数据库原理" class="headerlink" title="数据库原理"></a>数据库原理</h2><p>最开始接触数据库，当然要从最基本的原理入手。了解数据库的底层架构，能对具体的语法以及数据库的功能产生更深层次的理解。更直白的说，会清楚地了解到自己正在做什么。</p><p>那么还留在这里的小伙伴，就跟我一起来学习一下数据库的基本架构和数据模型吧。</p><h3 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h3><p>数据库系统一般由数据库（DB）、数据库管理系统（DBMS）、应用系统、数据库管理员（DBA）和用户构成，其中DBMS是数据库的基础和核心。下图可用于简单理解数据库系统的架构。</p><p><img src="/MySQL.assets%5CDB_structure.png" alt="DB structure"></p><p>数据库管理系统（DBMS）是数据库系统的核心组成，主要完成数据库的操作与管理功能，实现数据库对象的创建，数据库存储数据的查询、添加、修改与删除的操作，以及数据库的用户管理、权限管理等。这些具体的功能实现我们在之后也都会讲到。</p><p>至于数据库，可以简单理解为数据的仓库。更精确一点的定义为，是按照数据结构来组织、存储和管理数据的仓库，是一个可长期存储在计算机内的有组织、可共享、统一管理的大量数据的集合。</p><p>接着，我们就来讲讲都有哪些数据模型。</p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>数据库发展过程中产生过三种基本的数据模型，他们是层次模型、网状模型和关系模型。目前比较流行的数据模型就是关系模型，我们接下来学习的MySQL中使用的，也是关系模型。</p><p>关系模型以记录组或者数据表的形式组织数据，以便利用各种实体间与属性之间的关系进行储存和变换，不分层也无指针，是建立空间数据和属性数据之间关系的一种非常有效的数据组织格式。</p><p>数据模型可以按照不同的应用层次分为三种类型：概念模型、逻辑模型、物理模型。</p><h2 id="数据库结构设计"><a href="#数据库结构设计" class="headerlink" title="数据库结构设计"></a>数据库结构设计</h2><h2 id="表记录操作"><a href="#表记录操作" class="headerlink" title="表记录操作"></a>表记录操作</h2><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><h2 id="存储过程和存储函数"><a href="#存储过程和存储函数" class="headerlink" title="存储过程和存储函数"></a>存储过程和存储函数</h2><h2 id="触发器和事件"><a href="#触发器和事件" class="headerlink" title="触发器和事件"></a>触发器和事件</h2><h2 id="用户权限管理"><a href="#用户权限管理" class="headerlink" title="用户权限管理"></a>用户权限管理</h2><p>由于root用户，或者称为管理员为超级用户，具有对数据库的所有权限，而在实际的应用中，为了提高数据库系统的安全性，不可能让所有的访问者都拥有这样的权限，对数据库内容随意进行修改。因此需要创建多个具有不同权限的用户来进行访问控制和管理。例如，我们经常使用的QQ中，群主具有对群的所有权限，管理员具有部分权限，而一般的群友的权限就比较少了。</p><p>我们的用户权限管理也是这样的。</p><h3 id="用户管理操作"><a href="#用户管理操作" class="headerlink" title="用户管理操作"></a>用户管理操作</h3><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><p>要管理用户，首先我们得有用户，在MySQL中，我们通过以下命令来新建一个用户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> 用户名@主机名 [IDENTIFIED <span class="hljs-keyword">BY</span> [PASSWORD] 密码], …<br></code></pre></td></tr></table></figure><p>其中最值得关注的就是用户的命名方式，我们可以看到MySQL中采用了<code>用户名@主机名</code>的命名的规则。用户名即为访问数据库的用户代号，若其中含有特殊符号或通配符，则需要用<code>&#39; &#39;</code>将其括起来，而主机名代表的是安装MySQL服务器的主机名或者IP地址，将本地主机作为服务器时，可以使用<code>localhost</code>来代表。</p><p>特别的，如果两个用户具有相同的用户名，而主机不同，它们会被视为两个不同的用户，但是同一主机用户名唯一。</p><p>这一命令中，<code>[]</code> 代表的是可选选项，也就是说，MySQL允许用户不使用密码登录，而中间的<code>[PASSWORD]</code>对初学者来说一般使用不到，暂时也不做讲解。</p><p>例如，可以使用如下格式创建新用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> fish<span class="hljs-variable">@localhost</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;1234&#x27;</span>;<br></code></pre></td></tr></table></figure><p>之后可使用<code>select</code>语句从user表中查看当前存在的用户。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><h4 id="修改用户名和密码"><a href="#修改用户名和密码" class="headerlink" title="修改用户名和密码"></a>修改用户名和密码</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">RENAME <span class="hljs-keyword">USER</span> 用户名@主机名 <span class="hljs-keyword">TO</span> 新用户名@主机名,        ##修改用户名<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> 用户名@主机名 IDENTIFIED <span class="hljs-keyword">BY</span> 新密码;      ##修改用户登录密码<br></code></pre></td></tr></table></figure><p>非常好理解。</p><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><p>当不再需要某个用户时，可以通过</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> 用户名@主机名, ...<br></code></pre></td></tr></table></figure><p>来将其删除。该语句可以删除一个或者多个用户，但不会删除被删用户之前创建的的表、索引或视图等，这些对象将继续保留。</p><h4 id="登录用户"><a href="#登录用户" class="headerlink" title="登录用户"></a>登录用户</h4><p>用户已经创建好了，那么我们怎么登陆呢？当只有mysql环境时，这一点书上的描述并不是很清楚，下面我提供两种方法：</p><ol><li>通过<code>cmd</code>界面登陆用户。在界面中输入 <code>mysql -u 用户名@主机名 -p &#123;databasename&#125; </code> 根据提示输入设定的密码，即可通过该方法登录用户。</li><li>在<code>workbench</code>中新建用户。通过命令创建用户之后，回到首页新建连接，输入新用户的用户名和密码后点击登录。</li></ol><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><h4 id="权限授予"><a href="#权限授予" class="headerlink" title="权限授予"></a>权限授予</h4><p>新用户不允许访问其他用户创建的表，也不能立即创建自己的表，必须先获得授权。用户可以被授予的权限按照mysql中的分级可以做如下划分：</p><p>（1） 列权限，与表中的一个具体的列相关。</p><p>（2） 表权限，与一个表中的所有数据相关。</p><p>（3） 数据库权限，与数据库中所有的表有关</p><p>（4） 用户权限，与所有数据库相关。</p><p>给用户授予权限的语句语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> 权限类型[(列,…)],…<br><span class="hljs-keyword">ON</span> &#123;dbname&#125;.&#123;tablename&#125;<br><span class="hljs-keyword">TO</span> 用户名@主机名 [IDENTIFIED <span class="hljs-keyword">BY</span> [PASSWORD] 密码], ...<br>[<span class="hljs-keyword">WITH</span> 选项]<br></code></pre></td></tr></table></figure><p>其中，常用权限类型如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>: 使用 <span class="hljs-keyword">select</span> 语句访问指定位置的权限<br><span class="hljs-keyword">INSERT</span>: 使用 <span class="hljs-keyword">insert</span> 语句添加内容的权限<br><span class="hljs-keyword">DELETE</span>: 使用 <span class="hljs-keyword">delete</span> 语句删除的权限<br><span class="hljs-keyword">UPDATE</span>: 使用 <span class="hljs-keyword">update</span> 修改的权限<br><span class="hljs-keyword">REFERENCES</span>: 给予用户创建外键的权限<br><span class="hljs-keyword">CREATE</span>: 使用 <span class="hljs-keyword">create</span> 的权限<br><span class="hljs-keyword">ALTER</span>: 使用 <span class="hljs-keyword">alter</span> 语句的权限<br>INDEX: 创建索引的权限<br><span class="hljs-keyword">DROP</span>: 删除的权限<br><span class="hljs-keyword">ALL</span> 或 <span class="hljs-keyword">ALL</span> PRIVILEGES: 给予用户所有的权限<br></code></pre></td></tr></table></figure><p>在 TO 子句中给已存在的用户指定密码，新密码将会覆盖原密码。但是也别试图此时再创建用户，因为Mysql8不允许对未创建用户授予权限。</p><p>权限授予结束后，我们可以通过下面的语句来显示并查看是否正确授权。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> GRANTS <span class="hljs-keyword">FOR</span> 用户;<br></code></pre></td></tr></table></figure><h4 id="权限转移和限制"><a href="#权限转移和限制" class="headerlink" title="权限转移和限制"></a>权限转移和限制</h4><p>这一操作也是在权限授予的语句中完成的，即通过 GRANT 语句中的 WITH 子句来实现的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> permission_type<br><span class="hljs-keyword">ON</span> ...<br><span class="hljs-keyword">TO</span> ...<br><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION <span class="hljs-operator">|</span> <span class="hljs-keyword">WITH</span> CONSTRAIN;<br></code></pre></td></tr></table></figure><p>WITH 子句有两个选项，下面我们分开来讲：</p><p><code>WITH GRANT OPTION</code> 选项表示 TO 子句中指定的所有用户都能够将自己拥有的权限授予其他用户。</p><p><code>WITH 使用限制</code> 中的 <code>使用限制</code> 通过对一些使用次数进行限制来对用户限制，例如限制用户每小时访问次数等。</p><h4 id="权限撤销"><a href="#权限撤销" class="headerlink" title="权限撤销"></a>权限撤销</h4><p>假如我们只是想将某个用户权限撤销，而不想将该用户删除，就好比撤销管理员职位，但是并不踢出群聊，我们就可以使用 REVOKE 语句来实现。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">REVOKE</span> 权限类型[(列表)], ... <br><span class="hljs-keyword">ON</span> &#123;dbname&#125;.&#123;tablename&#125;<br><span class="hljs-keyword">FROM</span> 用户名@主机名, ...<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">ALL</span> PRIVILEGES, <span class="hljs-keyword">GRANT</span> OPTION <span class="hljs-keyword">FROM</span> 用户名@主机名, ...<br></code></pre></td></tr></table></figure><p>第一种格式用于撤销指定的权限，而第二种格式会直接撤销该用户所有的权限（包括 WITH 子句中的授权）。</p><h3 id="通过角色进行权限管理"><a href="#通过角色进行权限管理" class="headerlink" title="通过角色进行权限管理"></a>通过角色进行权限管理</h3><p>那么我们现在就已经熟悉了基本的用户管理操作了，也已经学会了从创建用户到销毁用户的全流程（bushi）。自然而然地就会产生一种疑问，当我需要对大量的用户进行批量授权时，难道只能一个接一个把权限给他们吗？</p><p>答案当然是，不是这样的。MySQL中提供了通过标签化的方式来授予权限，不过在这里被称为**角色(role)**。</p><p>角色是一组权限的集合，将角色赋予某个用户，那么该用户就具有该角色对应的权限。</p><p>常用的创建角色和分配权限的语句如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> ROLE IF <span class="hljs-keyword">EXISTS</span> 角色名       ## 删除角色<br><span class="hljs-keyword">CREATE</span> ROLE 角色名, ...          ## 创建角色<br><span class="hljs-keyword">GRANT</span> 权限名 <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> 角色名     ## 为角色分配权限<br><span class="hljs-keyword">GRANT</span> 角色名 <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> 用户      ## 为某个用户赋予角色的权限<br># 启用角色。注意，设置角色后如果不启用，用户将仍旧得不到授权<br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">DEFAULT</span> ROLE <span class="hljs-keyword">TO</span> 用户<br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">DEFAULT</span> ROLE <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">TO</span> 用户     ## 当一个用户具有多个角色时使用<br># 撤销角色权限，注意是角色权限哦<br><span class="hljs-keyword">REVOKE</span> ... <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 角色名<br></code></pre></td></tr></table></figure><p>例如，我们可以通过以下代码，将角色 <code>db_read</code> 赋予用户 <code>user_1@localhost</code> ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">create</span> role <span class="hljs-keyword">and</span> authorizing<br><span class="hljs-keyword">drop</span> role if <span class="hljs-keyword">exists</span> db_read;<br><span class="hljs-keyword">create</span> role db_read;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> db_read;<br># <span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> if <span class="hljs-keyword">exists</span> user_1<span class="hljs-variable">@localhost</span>;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> user_1<span class="hljs-variable">@localhost</span> <br>identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;1234&#x27;</span>;<br># authorizing<br><span class="hljs-keyword">grant</span> db_read <span class="hljs-keyword">to</span> user_1<span class="hljs-variable">@localhost</span>;<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">default</span> role <span class="hljs-keyword">to</span> user_1<span class="hljs-variable">@localhost</span>;<br></code></pre></td></tr></table></figure><p>最后提醒，这里只是示例，在进行具体操作时，建议对角色和用户的命名都要遵守一定的规范。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>USE SELECT</title>
    <link href="/2022/04/08/mysql/use_select/"/>
    <url>/2022/04/08/mysql/use_select/</url>
    
    <content type="html"><![CDATA[<p>​       在SQL语句中，可以说最重要的便是<code>SELECT</code>语句，它不仅让我们可以查看数据库中的数据，更重要的是它提供给了我们处理数据的接口，使得一些复杂过程得以实现。</p><p>​       本文将对<code>SELECT</code>语句的相关用法作出简单梳理，希望能有所帮助。</p><h2 id="select的简单用法"><a href="#select的简单用法" class="headerlink" title="select的简单用法"></a>select的简单用法</h2><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> SEX <span class="hljs-keyword">FROM</span> HANBAODB <span class="hljs-keyword">WHERE</span> NAME <span class="hljs-operator">=</span> &quot;MAZIZHEN&quot;;<br>#从hanbaodb中查询出mazizhen的性别<br></code></pre></td></tr></table></figure><h3 id="多表联结查询"><a href="#多表联结查询" class="headerlink" title="多表联结查询"></a>多表联结查询</h3><h2 id="select的略微复杂应用"><a href="#select的略微复杂应用" class="headerlink" title="select的略微复杂应用"></a>select的略微复杂应用</h2><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h3 id="select修改表数据"><a href="#select修改表数据" class="headerlink" title="select修改表数据"></a>select修改表数据</h3>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
