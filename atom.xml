<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CCFish</title>
  
  <subtitle>I gonna chasing my dream</subtitle>
  <link href="http://fish151.cc/atom.xml" rel="self"/>
  
  <link href="http://fish151.cc/"/>
  <updated>2022-04-28T08:21:03.763Z</updated>
  <id>http://fish151.cc/</id>
  
  <author>
    <name>Fish</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL从入门到入土</title>
    <link href="http://fish151.cc/2022/04/27/mysql/MySQL/"/>
    <id>http://fish151.cc/2022/04/27/mysql/MySQL/</id>
    <published>2022-04-27T03:00:00.000Z</published>
    <updated>2022-04-28T08:21:03.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="x3D-x3D-STATUS-INCOMPLETE-x3D-x3D"><a href="#x3D-x3D-STATUS-INCOMPLETE-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;STATUS: INCOMPLETE&#x3D;&#x3D;"></a>&#x3D;&#x3D;STATUS: INCOMPLETE&#x3D;&#x3D;</h1><p>一直都有想过给数据库的学习做一点点总结，写一点什么，比如简单语句指南或者称之为使用手册也未尝不可的东西。正好最近数据库课程结课，在为期末做准备了，也似乎就有了那么一些理由来坚持写一点什么，斗胆也把我在学习数据库过程中的一些心得体会，以及总结的算是框架的东西，来和大家分享一下。</p><blockquote><p>提前声明一下</p><p>使用教材为：《MySQL实用教材（第4版）》</p><p>在我看来这本书其实还不错，起码作为一本入门的书，还是值得一读的。</p></blockquote><p>你可以从右边的目录直接跳转到感兴趣的内容，而我当然是从头到尾梳理。那么我们下面就直接开始了！</p><h2 id="数据库原理"><a href="#数据库原理" class="headerlink" title="数据库原理"></a>数据库原理</h2><h2 id="数据库结构设计"><a href="#数据库结构设计" class="headerlink" title="数据库结构设计"></a>数据库结构设计</h2><h2 id="表记录操作"><a href="#表记录操作" class="headerlink" title="表记录操作"></a>表记录操作</h2><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><h2 id="存储过程和存储函数"><a href="#存储过程和存储函数" class="headerlink" title="存储过程和存储函数"></a>存储过程和存储函数</h2><h2 id="触发器和事件"><a href="#触发器和事件" class="headerlink" title="触发器和事件"></a>触发器和事件</h2><h2 id="用户权限管理"><a href="#用户权限管理" class="headerlink" title="用户权限管理"></a>用户权限管理</h2><p>由于root用户，或者称为管理员为超级用户，具有对数据库的所有权限，而在实际的应用中，为了提高数据库系统的安全性，不可能让所有的访问者都拥有这样的权限，对数据库内容随意进行修改。因此需要创建多个具有不同权限的用户来进行访问控制和管理。例如，我们经常使用的QQ中，群主具有对群的所有权限，管理员具有部分权限，而一般的群友的权限就比较少了。</p><p>我们的用户权限管理也是这样的。</p><h3 id="用户管理操作"><a href="#用户管理操作" class="headerlink" title="用户管理操作"></a>用户管理操作</h3><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><p>要管理用户，首先我们得有用户，在MySQL中，我们通过以下命令来新建一个用户：</p><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE USER 用户名@主机名 [IDENTIFIED BY [PASSWORD] 密码], …<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>其中最值得关注的就是用户的命名方式，我们可以看到MySQL中采用了<code>用户名@主机名</code>的命名的规则。用户名即为访问数据库的用户代号，若其中含有特殊符号或通配符，则需要用<code>&#39; &#39;</code>将其括起来，而主机名代表的是安装MySQL服务器的主机名或者IP地址，将本地主机作为服务器时，可以使用<code>localhost</code>来代表。</p><p>特别的，如果两个用户具有相同的用户名，而主机不同，它们会被视为两个不同的用户，但是同一主机用户名唯一。</p><p>这一命令中，<code>[]</code> 代表的是可选选项，也就是说，MySQL允许用户不使用密码登录，而中间的<code>[PASSWORD]</code>对初学者来说一般使用不到，暂时也不做讲解。</p><p>例如，可以使用如下格式创建新用户</p><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">create user fish@localhost identified by &#39;1234&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>之后可使用<code>select</code>语句从user表中查看当前存在的用户。</p><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select * from user;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h4 id="修改用户名和密码"><a href="#修改用户名和密码" class="headerlink" title="修改用户名和密码"></a>修改用户名和密码</h4><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">rename user 用户名@主机名 to 新用户名@主机名,        ##修改用户名alter user 用户名@主机名 identified by 新密码;      ##修改用户登录密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>非常好理解。</p><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><p>当不再需要某个用户时，可以通过</p><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">drop user 用户名@主机名, <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>来将其删除。该语句可以删除一个或者多个用户，但不会删除被删用户之前创建的的表、索引或视图等，这些对象将继续保留。</p><h4 id="登录用户"><a href="#登录用户" class="headerlink" title="登录用户"></a>登录用户</h4><p>用户已经创建好了，那么我们怎么登陆呢？当只有mysql环境时，这一点书上的描述并不是很清楚，下面我提供两种方法：</p><ol><li>通过<code>cmd</code>界面登陆用户。在界面中输入 <code>mysql -u 用户名@主机名 -p &#123;databasename&#125; </code> 根据提示输入设定的密码，即可通过该方法登录用户。</li><li>在<code>workbench</code>中新建用户。通过命令创建用户之后，回到首页新建连接，输入新用户的用户名和密码后点击登录。</li></ol><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><h4 id="权限授予"><a href="#权限授予" class="headerlink" title="权限授予"></a>权限授予</h4><p>新用户不允许访问其他用户创建的表，也不能立即创建自己的表，必须先获得授权。用户可以被授予的权限按照mysql中的分级可以做如下划分：</p><p>（1） 列权限，与表中的一个具体的列相关。</p><p>（2） 表权限，与一个表中的所有数据相关。</p><p>（3） 数据库权限，与数据库中所有的表有关</p><p>（4） 用户权限，与所有数据库相关。</p><p>给用户授予权限的语句语法如下：</p><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">GRANT 权限类型[(列,…)],…ON &#123;dbname&#125;.&#123;tablename&#125;TO 用户名@主机名 [IDENTIFIED BY [PASSWORD] 密码], ...[WITH 选项]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>其中，常用权限类型如下：</p><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT: 使用 select 语句访问指定位置的权限INSERT: 使用 insert 语句添加内容的权限DELETE: 使用 delete 语句删除的权限UPDATE: 使用 update 修改的权限REFERENCES: 给予用户创建外键的权限CREATE: 使用 create 的权限ALTER: 使用 alter 语句的权限INDEX: 创建索引的权限DROP: 删除的权限ALL 或 ALL PRIVILEGES: 给予用户所有的权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>在 TO 子句中给已存在的用户指定密码，新密码将会覆盖原密码。但是也别试图此时再创建用户，因为Mysql8不允许对未创建用户授予权限。</p><p>权限授予结束后，我们可以通过下面的语句来显示并查看是否正确授权。</p><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SHOW GRANTS FOR 用户;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h4 id="权限转移和限制"><a href="#权限转移和限制" class="headerlink" title="权限转移和限制"></a>权限转移和限制</h4><p>这一操作也是在权限授予的语句中完成的，即通过 GRANT 语句中的 WITH 子句来实现的。</p><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">GRANT permission_typeON ...TO ...WITH GRANT OPTION | WITH CONSTRAIN;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="通过角色进行权限管理"><a href="#通过角色进行权限管理" class="headerlink" title="通过角色进行权限管理"></a>通过角色进行权限管理</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;x3D-x3D-STATUS-INCOMPLETE-x3D-x3D&quot;&gt;&lt;a href=&quot;#x3D-x3D-STATUS-INCOMPLETE-x3D-x3D&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x3D;&amp;#x3D;STATUS: INCOMP</summary>
      
    
    
    
    <category term="Tech" scheme="http://fish151.cc/categories/Tech/"/>
    
    
    <category term="MySQL" scheme="http://fish151.cc/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>USE SELECT</title>
    <link href="http://fish151.cc/2022/04/08/mysql/use_select/"/>
    <id>http://fish151.cc/2022/04/08/mysql/use_select/</id>
    <published>2022-04-08T03:45:34.000Z</published>
    <updated>2022-04-25T07:31:04.250Z</updated>
    
    <content type="html"><![CDATA[<p>​       在SQL语句中，可以说最重要的便是<code>SELECT</code>语句，它不仅让我们可以查看数据库中的数据，更重要的是它提供给了我们处理数据的接口，使得一些复杂过程得以实现。</p><p>​       本文将对<code>SELECT</code>语句的相关用法作出简单梳理，希望能有所帮助。</p><h2 id="select的简单用法"><a href="#select的简单用法" class="headerlink" title="select的简单用法"></a>select的简单用法</h2><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT SEX FROM HANBAODB WHERE NAME &#x3D; &quot;MAZIZHEN&quot;;#从hanbaodb中查询出mazizhen的性别<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="多表联结查询"><a href="#多表联结查询" class="headerlink" title="多表联结查询"></a>多表联结查询</h3><h2 id="select的略微复杂应用"><a href="#select的略微复杂应用" class="headerlink" title="select的略微复杂应用"></a>select的略微复杂应用</h2><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h3 id="select修改表数据"><a href="#select修改表数据" class="headerlink" title="select修改表数据"></a>select修改表数据</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​       在SQL语句中，可以说最重要的便是&lt;code&gt;SELECT&lt;/code&gt;语句，它不仅让我们可以查看数据库中的数据，更重要的是它提供给了我们处理数据的接口，使得一些复杂过程得以实现。&lt;/p&gt;
&lt;p&gt;​       本文将对&lt;code&gt;SELECT&lt;/code&gt;</summary>
      
    
    
    
    <category term="Tech" scheme="http://fish151.cc/categories/Tech/"/>
    
    
    <category term="MySQL" scheme="http://fish151.cc/tags/MySQL/"/>
    
  </entry>
  
</feed>
